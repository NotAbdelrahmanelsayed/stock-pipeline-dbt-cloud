x-airflow-common:
  &airflow-common
  build: .
  env_file: airflow.env
  environment: &airflow-common-env
    _PIP_ADDITIONAL_REQUIREMENTS: ""
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}:/opt/airflow # Project dir 

  user: "${AIRFLOW_UID:-1000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    container_name: postgres-db
    image: postgres:15
    env_file: postgres.env
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-apiserver:
    container_name: airflow-apiserver
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    container_name: airflow-scheduler
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    container_name: airflow-init
    <<: *airflow-common
    environment:
      <<: *airflow-common-env
    user: "${AIRFLOW_UID:-1000}:0"
    entrypoint: ["/bin/bash", "/opt/airflow/scripts/airflow-init.sh"]

  airflow-dag-processor:
    container_name: airflow-dag-processor
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  dbt:
    container_name: dbt_core
    build:
      context: .
      dockerfile: dbt_Dockerfile
    ports:
      - "3000:8081" 
    volumes:
      - .:/usr/app/
    working_dir: /usr/app/stock_modeling
    environment:
      DBT_PROFILES_DIR: /usr/app/ # Ensures dbt uses your profiles.yml file from the project directory

    entrypoint: ["tail", "-f", "/dev/null"] # Keeps the dbt container running

volumes:
  postgres-db-volume:
